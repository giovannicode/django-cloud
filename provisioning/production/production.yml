---
- hosts: 104.131.28.36
  user: root
  sudo: yes
  tasks:
    - name: run apt-get update
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ item }} state=installed
      with_items:
        - build-essential
        - libpq-dev
        - python-dev
        - python-setuptools
        - python-pip
        - postgresql-9.3-postgis-2.1
        - postgresql-contrib
        - git 
        - libjpeg-dev
        - fish
        - nginx
        - supervisor

    - name: create worker group
      user: name=worker uid=1020

    - name: create website user and add to the worker group
      user: name=website uid=1010 groups="worker,sudo" password=$6$aPAfjl5w39XCz4qf$Yfjp5AHL1QwdYYiP6omTytTMhAt2YHYJ.yPmr2q5yI7U35fS0FLj2TSWtzL5ps8UiTjyVABkZeNxu5HmxHa33/

    - name: Create website root directory and configure permissions
      file: path=/website state=directory owner=website group=worker  mode="g+s" recurse=yes

    - name: Upgrade pip
      pip: name=pip state=latest

    - name: install virtualenv
      pip: name=virtualenv

    - name: create virtualenv
      command: virtualenv /website/env

    - name: Create data directory
      file: path=/website/data state=directory

    - name: Create etc directory
      file: path=/website/etc state=directory

    - name: Create files directory
      file: path=/website/files state=directory

    - name: install psycopg2 in order to configure postgres databases
      pip: name=psycopg2

    - name: Create postgres user
      postgresql_user: name=website_user password=password
      sudo: yes
      sudo_user: postgres

    - name: Create postgres database
      postgresql_db: name=website_db owner=website_user
      sudo: yes
      sudo_user: postgres

    - name: Add postgis extension to website db
      postgresql_ext: name=postgis db=website_db
      sudo: yes
      sudo_user: postgres

    - name: Configure permissions again so they'll apply to the recently created directories
      file: path=/website owner=website group=worker  mode="g+s" recurse=yes

    # Clone the repository / pull the latest changes
    - name: clone the repository
      git: repo=https://github.com/giovannicode/django-cloud.git dest=/website/src
    

    # Setup the neccessary production settings
    - name: Install nginx web server
      apt: name=nginx state=installed

    - name: Configure nginx
      copy: src=nginx/production dest=/etc/nginx/sites-available/website

    - name: Create neccessary symlink
      file: src=/etc/nginx/sites-available/website dest=/etc/nginx/sites-enabled/website state=link

    - name: Delete default nginx config file.
      file: path=/etc/nginx/sites-enabled/default state=absent 


    # Setup static/media directories
    - name: Create Django static files directory
      file: path=/website/files/static state=directory  

    - name: Create Django media files directory
      file: path=/website/files/media state=directory  


    # SETUP GUNICORN
    - name: Create gunicorn directories
      file: path=/website/etc/gunicorn state=directory

    - name: Configure gunicorn 
      copy: src=gunicorn/conf.py dest=/website/etc/gunicorn/conf.py


    # SETUP SUPERVISOR
    - name: Create supervisor directories
      file: path=/etc/supervisor/conf.d state=directory

    - name: Create supervisor gunicorn log directores
      file: path=/var/log/supervisor/gunicorn state=directory

    - name: setup gunicorn with supervisor
      copy: src=supervisor/gunicorn.conf dest=/etc/supervisor/conf.d/gunicorn.conf

    # Make sure directory permission are set correctly
    - name: Configure permissions again so they'll apply to the recently created directories
      file: path=/website owner=website group=worker  mode="g+s" recurse=yes

    - name: pip install requirements.txt
      pip: virtualenv=/website/env requirements=/website/src/cloud/requirements.txt

    # restart everything
    - name: Restart nginx
      service: name=nginx state=restarted 

    - name: Restart supervisor
      command: service supervisor restart

    - name: Restart gunicorn
      supervisorctl: name=gunicorn state=restarted config=/etc/supervisor/conf.d/gunicorn.conf

    # migrate models and collect static files
    - name: Migrate models into database
      django_manage: virtualenv=/website/env/ app_path=/website/src/cloud/ command=migrate

    - name: Collect static files
      django_manage: virtualenv=/website/env/ app_path=/website/src/cloud/ command="collectstatic --noinput"

    # Setup the developer tools
    - name: Create fish config directory
      file: path=~/.config/fish state=directory owner=website group=website
      sudo_user: website

    - name: Install config.fish if it doesn't already exist
      command: cp /website/src/developer-tools/config.fish ~/.config/fish/config.fish creates=~/.config/fish/config.fish
      sudo_user: website

    - name: Install .vimrc if it doesn't already exist 
      command: cp /website/src/developer-tools/.vimrc ~/.vimrc creates=~/.vimrc
      sudo_user: website

    - name: Set fish as the default shell 
      user: name=website shell=/usr/bin/fish
      sudo: yes
